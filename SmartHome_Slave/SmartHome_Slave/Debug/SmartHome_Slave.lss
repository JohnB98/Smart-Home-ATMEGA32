
SmartHome_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000738  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  00000738  000007ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001efe  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b23  00000000  00000000  000028fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c7a  00000000  00000000  0000341d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  00004098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000773  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f3d  00000000  00000000  00004a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00005944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	93 02       	muls	r25, r19
  56:	ae 02       	muls	r26, r30
  58:	c9 02       	muls	r28, r25
  5a:	e4 02       	muls	r30, r20
  5c:	ff 02       	muls	r31, r31
  5e:	1a 03       	fmul	r17, r18
  60:	35 03       	mulsu	r19, r21
  62:	4f 03       	fmul	r20, r23
  64:	69 03       	fmul	r22, r17

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e8 e3       	ldi	r30, 0x38	; 56
  7a:	f7 e0       	ldi	r31, 0x07	; 7
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	a2 30       	cpi	r26, 0x02	; 2
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>
  88:	0e 94 79 02 	call	0x4f2	; 0x4f2 <main>
  8c:	0c 94 9a 03 	jmp	0x734	; 0x734 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <ADC_Init>:
 */ 

#include "ADC.h"

void ADC_Init(){
	ADMUX |= (1<<REFS1)|(1<<REFS0);
  94:	87 b1       	in	r24, 0x07	; 7
  96:	80 6c       	ori	r24, 0xC0	; 192
  98:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	87 68       	ori	r24, 0x87	; 135
  9e:	86 b9       	out	0x06, r24	; 6
  a0:	08 95       	ret

000000a2 <Temp_Read>:
}
unsigned short Temp_Read(unsigned char channel){
	unsigned short data = 0;
	ADMUX = (ADMUX & 0b11100000)|(channel & 0b00011111);
  a2:	97 b1       	in	r25, 0x07	; 7
  a4:	90 7e       	andi	r25, 0xE0	; 224
  a6:	8f 71       	andi	r24, 0x1F	; 31
  a8:	89 2b       	or	r24, r25
  aa:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  ac:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <Temp_Read+0xc>
	ADCSRA |= (1<<ADIF);
  b2:	34 9a       	sbi	0x06, 4	; 6
	data = ADCL;
  b4:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
  b6:	25 b1       	in	r18, 0x05	; 5
	return data;
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	92 2b       	or	r25, r18
  bc:	08 95       	ret

000000be <DC_Init>:
 *  Author: Jean
 */ 
#include "DC_Motor.h"

void DC_Init(){
	OCR1A = 200;
  be:	88 ec       	ldi	r24, 0xC8	; 200
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	9b bd       	out	0x2b, r25	; 43
  c4:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = (1<<WGM10)|(1<<COM1A1);
  c6:	81 e8       	ldi	r24, 0x81	; 129
  c8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<CS01);
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	8e bd       	out	0x2e, r24	; 46
  ce:	08 95       	ret

000000d0 <DC_On>:
}

void DC_On(unsigned char direction){
	switch(direction){
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	19 f0       	breq	.+6      	; 0xda <DC_On+0xa>
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	51 f0       	breq	.+20     	; 0xec <DC_On+0x1c>
  d8:	08 95       	ret
		case 1:
		DIO_Write(DIO_ChannelC5,STD_High);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
		DIO_Write(DIO_ChannelC6,STD_Low);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	86 e1       	ldi	r24, 0x16	; 22
  e6:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
		break;
  ea:	08 95       	ret
		case 2:
		DIO_Write(DIO_ChannelC5,STD_Low);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	85 e1       	ldi	r24, 0x15	; 21
  f0:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
		DIO_Write(DIO_ChannelC6,STD_High);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	86 e1       	ldi	r24, 0x16	; 22
  f8:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
  fc:	08 95       	ret

000000fe <DC_Off>:
		break;
	}
}

void DC_Off(){
	DIO_Write(DIO_ChannelC5,STD_Low);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	85 e1       	ldi	r24, 0x15	; 21
 102:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	DIO_Write(DIO_ChannelC6,STD_Low);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	86 e1       	ldi	r24, 0x16	; 22
 10a:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
 10e:	08 95       	ret

00000110 <DIO_Write>:
*/
#include "DIO.h"

void DIO_Write(DIO_ChannelTypes ChannelID,STD_LevelTypes Level){
	DIO_PortTypes Portx = ChannelID/8;
	DIO_ChannelTypes ChannelPos = ChannelID%8;
 110:	98 2f       	mov	r25, r24
 112:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
 114:	86 95       	lsr	r24
 116:	86 95       	lsr	r24
 118:	86 95       	lsr	r24
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	21 f1       	breq	.+72     	; 0x166 <DIO_Write+0x56>
 11e:	30 f0       	brcs	.+12     	; 0x12c <DIO_Write+0x1c>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	f1 f1       	breq	.+124    	; 0x1a0 <DIO_Write+0x90>
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	09 f4       	brne	.+2      	; 0x12a <DIO_Write+0x1a>
 128:	58 c0       	rjmp	.+176    	; 0x1da <DIO_Write+0xca>
 12a:	08 95       	ret
		case DIO_PortA:
		if (Level == STD_High)
 12c:	61 30       	cpi	r22, 0x01	; 1
 12e:	69 f4       	brne	.+26     	; 0x14a <DIO_Write+0x3a>
		{
			SetBit(PORTA_Reg,ChannelPos);
 130:	4b b3       	in	r20, 0x1b	; 27
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_Write+0x2e>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	9a 95       	dec	r25
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_Write+0x2a>
 142:	cb 01       	movw	r24, r22
 144:	84 2b       	or	r24, r20
 146:	8b bb       	out	0x1b, r24	; 27
 148:	08 95       	ret
		}
		else{
			ClearBit(PORTA_Reg,ChannelPos);
 14a:	4b b3       	in	r20, 0x1b	; 27
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_Write+0x48>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	9a 95       	dec	r25
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_Write+0x44>
 15c:	cb 01       	movw	r24, r22
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8b bb       	out	0x1b, r24	; 27
 164:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (Level == STD_High)
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	69 f4       	brne	.+26     	; 0x184 <DIO_Write+0x74>
		{
			SetBit(PORTB_Reg,ChannelPos);
 16a:	48 b3       	in	r20, 0x18	; 24
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_Write+0x68>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_Write+0x64>
 17c:	cb 01       	movw	r24, r22
 17e:	84 2b       	or	r24, r20
 180:	88 bb       	out	0x18, r24	; 24
 182:	08 95       	ret
		}
		else{
			ClearBit(PORTB_Reg,ChannelPos);
 184:	48 b3       	in	r20, 0x18	; 24
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_Write+0x82>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	9a 95       	dec	r25
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_Write+0x7e>
 196:	cb 01       	movw	r24, r22
 198:	80 95       	com	r24
 19a:	84 23       	and	r24, r20
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (Level == STD_High)
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_Write+0xae>
		{
			SetBit(PORTC_Reg,ChannelPos);
 1a4:	45 b3       	in	r20, 0x15	; 21
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_Write+0xa2>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	9a 95       	dec	r25
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_Write+0x9e>
 1b6:	cb 01       	movw	r24, r22
 1b8:	84 2b       	or	r24, r20
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	08 95       	ret
		}
		else{
			ClearBit(PORTC_Reg,ChannelPos);
 1be:	45 b3       	in	r20, 0x15	; 21
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	b9 01       	movw	r22, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_Write+0xbc>
 1c8:	66 0f       	add	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	9a 95       	dec	r25
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_Write+0xb8>
 1d0:	cb 01       	movw	r24, r22
 1d2:	80 95       	com	r24
 1d4:	84 23       	and	r24, r20
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (Level == STD_High)
 1da:	61 30       	cpi	r22, 0x01	; 1
 1dc:	69 f4       	brne	.+26     	; 0x1f8 <DIO_Write+0xe8>
		{
			SetBit(PORTD_Reg,ChannelPos);
 1de:	42 b3       	in	r20, 0x12	; 18
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	b9 01       	movw	r22, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_Write+0xdc>
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	9a 95       	dec	r25
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_Write+0xd8>
 1f0:	cb 01       	movw	r24, r22
 1f2:	84 2b       	or	r24, r20
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	08 95       	ret
		}
		else{
			ClearBit(PORTD_Reg,ChannelPos);
 1f8:	42 b3       	in	r20, 0x12	; 18
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_Write+0xf6>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	9a 95       	dec	r25
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_Write+0xf2>
 20a:	cb 01       	movw	r24, r22
 20c:	80 95       	com	r24
 20e:	84 23       	and	r24, r20
 210:	82 bb       	out	0x12, r24	; 18
 212:	08 95       	ret

00000214 <DIO_Init>:
	{Output,STD_High},
	{Output,STD_High},
	{Output,STD_High},
};

void DIO_Init(){
 214:	e0 e6       	ldi	r30, 0x60	; 96
 216:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	Uint8 count = 0;
	for (count = DIO_ChannelA0;count < PINCOUNT;count++)
 218:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg,ChannelPos);
			}
			else
			{
				ClearBit(DDRB_Reg,ChannelPos);
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	50 e0       	ldi	r21, 0x00	; 0
	DIO_ChannelTypes ChannelPos;
	Uint8 count = 0;
	for (count = DIO_ChannelA0;count < PINCOUNT;count++)
	{
		Portx = count/8;
		ChannelPos = count%8;
 21e:	28 2f       	mov	r18, r24
 220:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 222:	98 2f       	mov	r25, r24
 224:	96 95       	lsr	r25
 226:	96 95       	lsr	r25
 228:	96 95       	lsr	r25
 22a:	91 30       	cpi	r25, 0x01	; 1
 22c:	09 f1       	breq	.+66     	; 0x270 <DIO_Init+0x5c>
 22e:	30 f0       	brcs	.+12     	; 0x23c <DIO_Init+0x28>
 230:	92 30       	cpi	r25, 0x02	; 2
 232:	c1 f1       	breq	.+112    	; 0x2a4 <DIO_Init+0x90>
 234:	93 30       	cpi	r25, 0x03	; 3
 236:	09 f4       	brne	.+2      	; 0x23a <DIO_Init+0x26>
 238:	4f c0       	rjmp	.+158    	; 0x2d8 <DIO_Init+0xc4>
 23a:	67 c0       	rjmp	.+206    	; 0x30a <DIO_Init+0xf6>
			case DIO_PortA:
			if (PinCfg[count].PinDir == Output)
 23c:	90 81       	ld	r25, Z
 23e:	91 30       	cpi	r25, 0x01	; 1
 240:	59 f4       	brne	.+22     	; 0x258 <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg,ChannelPos);
 242:	9a b3       	in	r25, 0x1a	; 26
 244:	ba 01       	movw	r22, r20
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_Init+0x38>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_Init+0x34>
 250:	9b 01       	movw	r18, r22
 252:	29 2b       	or	r18, r25
 254:	2a bb       	out	0x1a, r18	; 26
 256:	59 c0       	rjmp	.+178    	; 0x30a <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg,ChannelPos);
 258:	3a b3       	in	r19, 0x1a	; 26
 25a:	ba 01       	movw	r22, r20
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_Init+0x4e>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	2a 95       	dec	r18
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_Init+0x4a>
 266:	96 2f       	mov	r25, r22
 268:	90 95       	com	r25
 26a:	93 23       	and	r25, r19
 26c:	9a bb       	out	0x1a, r25	; 26
 26e:	4d c0       	rjmp	.+154    	; 0x30a <DIO_Init+0xf6>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].PinDir == Output)
 270:	90 81       	ld	r25, Z
 272:	91 30       	cpi	r25, 0x01	; 1
 274:	59 f4       	brne	.+22     	; 0x28c <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg,ChannelPos);
 276:	97 b3       	in	r25, 0x17	; 23
 278:	ba 01       	movw	r22, r20
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_Init+0x6c>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	2a 95       	dec	r18
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_Init+0x68>
 284:	9b 01       	movw	r18, r22
 286:	29 2b       	or	r18, r25
 288:	27 bb       	out	0x17, r18	; 23
 28a:	3f c0       	rjmp	.+126    	; 0x30a <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg,ChannelPos);
 28c:	37 b3       	in	r19, 0x17	; 23
 28e:	ba 01       	movw	r22, r20
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_Init+0x82>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	2a 95       	dec	r18
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_Init+0x7e>
 29a:	96 2f       	mov	r25, r22
 29c:	90 95       	com	r25
 29e:	93 23       	and	r25, r19
 2a0:	97 bb       	out	0x17, r25	; 23
 2a2:	33 c0       	rjmp	.+102    	; 0x30a <DIO_Init+0xf6>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].PinDir == Output)
 2a4:	90 81       	ld	r25, Z
 2a6:	91 30       	cpi	r25, 0x01	; 1
 2a8:	59 f4       	brne	.+22     	; 0x2c0 <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg,ChannelPos);
 2aa:	94 b3       	in	r25, 0x14	; 20
 2ac:	ba 01       	movw	r22, r20
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_Init+0xa0>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	2a 95       	dec	r18
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_Init+0x9c>
 2b8:	9b 01       	movw	r18, r22
 2ba:	29 2b       	or	r18, r25
 2bc:	24 bb       	out	0x14, r18	; 20
 2be:	25 c0       	rjmp	.+74     	; 0x30a <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg,ChannelPos);
 2c0:	34 b3       	in	r19, 0x14	; 20
 2c2:	ba 01       	movw	r22, r20
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_Init+0xb6>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	2a 95       	dec	r18
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_Init+0xb2>
 2ce:	96 2f       	mov	r25, r22
 2d0:	90 95       	com	r25
 2d2:	93 23       	and	r25, r19
 2d4:	94 bb       	out	0x14, r25	; 20
 2d6:	19 c0       	rjmp	.+50     	; 0x30a <DIO_Init+0xf6>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].PinDir == Output)
 2d8:	90 81       	ld	r25, Z
 2da:	91 30       	cpi	r25, 0x01	; 1
 2dc:	59 f4       	brne	.+22     	; 0x2f4 <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg,ChannelPos);
 2de:	91 b3       	in	r25, 0x11	; 17
 2e0:	ba 01       	movw	r22, r20
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_Init+0xd4>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	2a 95       	dec	r18
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_Init+0xd0>
 2ec:	9b 01       	movw	r18, r22
 2ee:	29 2b       	or	r18, r25
 2f0:	21 bb       	out	0x11, r18	; 17
 2f2:	0b c0       	rjmp	.+22     	; 0x30a <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg,ChannelPos);
 2f4:	31 b3       	in	r19, 0x11	; 17
 2f6:	ba 01       	movw	r22, r20
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_Init+0xea>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	2a 95       	dec	r18
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_Init+0xe6>
 302:	96 2f       	mov	r25, r22
 304:	90 95       	com	r25
 306:	93 23       	and	r25, r19
 308:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	Uint8 count = 0;
	for (count = DIO_ChannelA0;count < PINCOUNT;count++)
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	32 96       	adiw	r30, 0x02	; 2
 30e:	80 32       	cpi	r24, 0x20	; 32
 310:	09 f0       	breq	.+2      	; 0x314 <DIO_Init+0x100>
 312:	85 cf       	rjmp	.-246    	; 0x21e <DIO_Init+0xa>
				ClearBit(DDRD_Reg,ChannelPos);
			}
			break;
		}
	}
 314:	08 95       	ret

00000316 <LCD_Cmd>:
	LCD_Cmd(0x0C);
	LCD_Cmd(0x01);
	_delay_ms(2);
}

void LCD_Cmd(Uint8 cmd){
 316:	cf 93       	push	r28
 318:	c8 2f       	mov	r28, r24
	LCDDataPort = (LCDDataPort & 0x0F) | (cmd & 0xF0);
 31a:	8b b3       	in	r24, 0x1b	; 27
 31c:	8f 70       	andi	r24, 0x0F	; 15
 31e:	9c 2f       	mov	r25, r28
 320:	90 7f       	andi	r25, 0xF0	; 240
 322:	89 2b       	or	r24, r25
 324:	8b bb       	out	0x1b, r24	; 27
	DIO_Write(RS,STD_Low);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	89 e0       	ldi	r24, 0x09	; 9
 32a:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	DIO_Write(E,STD_High);
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	8b e0       	ldi	r24, 0x0B	; 11
 332:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	8f e8       	ldi	r24, 0x8F	; 143
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_Cmd+0x24>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_Cmd+0x2a>
 340:	00 00       	nop
	_delay_us(100);
	DIO_Write(E,STD_Low);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8b e0       	ldi	r24, 0x0B	; 11
 346:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	8f e1       	ldi	r24, 0x1F	; 31
 34c:	9e e4       	ldi	r25, 0x4E	; 78
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <LCD_Cmd+0x38>
 352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_Cmd+0x3e>
 354:	00 00       	nop
	
	_delay_ms(5);
	
	LCDDataPort = (LCDDataPort & 0x0F) | (cmd << 4);
 356:	8b b3       	in	r24, 0x1b	; 27
 358:	28 2f       	mov	r18, r24
 35a:	2f 70       	andi	r18, 0x0F	; 15
 35c:	30 e1       	ldi	r19, 0x10	; 16
 35e:	c3 9f       	mul	r28, r19
 360:	c0 01       	movw	r24, r0
 362:	11 24       	eor	r1, r1
 364:	82 2b       	or	r24, r18
 366:	8b bb       	out	0x1b, r24	; 27
	DIO_Write(RS,STD_Low);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	89 e0       	ldi	r24, 0x09	; 9
 36c:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	DIO_Write(E,STD_High);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8b e0       	ldi	r24, 0x0B	; 11
 374:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 378:	8f e8       	ldi	r24, 0x8F	; 143
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_Cmd+0x66>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_Cmd+0x6c>
 382:	00 00       	nop
	_delay_us(100);
	DIO_Write(E,STD_Low);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	8b e0       	ldi	r24, 0x0B	; 11
 388:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	8f e3       	ldi	r24, 0x3F	; 63
 38e:	9f e1       	ldi	r25, 0x1F	; 31
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_Cmd+0x7a>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_Cmd+0x80>
 396:	00 00       	nop
	_delay_ms(2);
}
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <LCD_Init>:
*/

#include "LCD.h"

void LCD_Init(){
	DIO_Write(RW,STD_Low);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	8a e0       	ldi	r24, 0x0A	; 10
 3a0:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	89 ef       	ldi	r24, 0xF9	; 249
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <LCD_Init+0xe>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_Init+0x18>
 3b4:	00 00       	nop
	_delay_ms(20);
	LCD_Cmd(0x33);
 3b6:	83 e3       	ldi	r24, 0x33	; 51
 3b8:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	8f e1       	ldi	r24, 0x1F	; 31
 3be:	93 e0       	ldi	r25, 0x03	; 3
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_Init+0x24>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_Init+0x2a>
 3c6:	00 00       	nop
	_delay_us(200);
	LCD_Cmd(0x32);
 3c8:	82 e3       	ldi	r24, 0x32	; 50
 3ca:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
	LCD_Cmd(0x28);
 3ce:	88 e2       	ldi	r24, 0x28	; 40
 3d0:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
	LCD_Cmd(0x06);
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
	LCD_Cmd(0x0C);
 3da:	8c e0       	ldi	r24, 0x0C	; 12
 3dc:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
	LCD_Cmd(0x01);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	9f e1       	ldi	r25, 0x1F	; 31
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_Init+0x4e>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_Init+0x54>
 3f0:	00 00       	nop
 3f2:	08 95       	ret

000003f4 <LCD_Char>:
	_delay_us(100);
	DIO_Write(E,STD_Low);
	_delay_ms(2);
}

void LCD_Char(Sint8 data){
 3f4:	cf 93       	push	r28
 3f6:	c8 2f       	mov	r28, r24
	LCDDataPort = (LCDDataPort & 0x0F) | (data & 0xF0);
 3f8:	8b b3       	in	r24, 0x1b	; 27
 3fa:	8f 70       	andi	r24, 0x0F	; 15
 3fc:	9c 2f       	mov	r25, r28
 3fe:	90 7f       	andi	r25, 0xF0	; 240
 400:	89 2b       	or	r24, r25
 402:	8b bb       	out	0x1b, r24	; 27
	DIO_Write(RS,STD_High);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	89 e0       	ldi	r24, 0x09	; 9
 408:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	DIO_Write(E,STD_High);
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	8b e0       	ldi	r24, 0x0B	; 11
 410:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 414:	8f e8       	ldi	r24, 0x8F	; 143
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	_delay_us(100);
	DIO_Write(E,STD_Low);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	8b e0       	ldi	r24, 0x0B	; 11
 424:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	8f e1       	ldi	r24, 0x1F	; 31
 42a:	9e e4       	ldi	r25, 0x4E	; 78
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
	
	_delay_ms(5);
	
	LCDDataPort = (LCDDataPort & 0x0F) | (data << 4);
 434:	8b b3       	in	r24, 0x1b	; 27
 436:	28 2f       	mov	r18, r24
 438:	2f 70       	andi	r18, 0x0F	; 15
 43a:	30 e1       	ldi	r19, 0x10	; 16
 43c:	c3 9f       	mul	r28, r19
 43e:	c0 01       	movw	r24, r0
 440:	11 24       	eor	r1, r1
 442:	82 2b       	or	r24, r18
 444:	8b bb       	out	0x1b, r24	; 27
	DIO_Write(RS,STD_High);
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	89 e0       	ldi	r24, 0x09	; 9
 44a:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	DIO_Write(E,STD_High);
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	8b e0       	ldi	r24, 0x0B	; 11
 452:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 456:	8f e8       	ldi	r24, 0x8F	; 143
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 460:	00 00       	nop
	_delay_us(100);
	DIO_Write(E,STD_Low);
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46a:	8f e3       	ldi	r24, 0x3F	; 63
 46c:	9f e1       	ldi	r25, 0x1F	; 31
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 474:	00 00       	nop
	_delay_ms(2);
}
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <LCD_String>:

void LCD_String(Sint8 * string){
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	fc 01       	movw	r30, r24
	Uint8 count = 0;
	while (string[count] != '\0')
 482:	80 81       	ld	r24, Z
 484:	88 23       	and	r24, r24
 486:	59 f0       	breq	.+22     	; 0x49e <LCD_String+0x24>
 488:	8f 01       	movw	r16, r30
 48a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_Char(string[count]);
 48c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_Char>
		count++;
 490:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);
}

void LCD_String(Sint8 * string){
	Uint8 count = 0;
	while (string[count] != '\0')
 492:	f8 01       	movw	r30, r16
 494:	ec 0f       	add	r30, r28
 496:	f1 1d       	adc	r31, r1
 498:	80 81       	ld	r24, Z
 49a:	81 11       	cpse	r24, r1
 49c:	f7 cf       	rjmp	.-18     	; 0x48c <LCD_String+0x12>
	{
		LCD_Char(string[count]);
		count++;
	}
}
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	08 95       	ret

000004a6 <LCD_StringPos>:

void LCD_StringPos(Sint8 * string,Uint8 line,Uint8 pos){
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	ec 01       	movw	r28, r24
	switch(line){
 4ac:	61 30       	cpi	r22, 0x01	; 1
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <LCD_StringPos+0x10>
 4b0:	62 30       	cpi	r22, 0x02	; 2
 4b2:	51 f0       	breq	.+20     	; 0x4c8 <LCD_StringPos+0x22>
 4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <LCD_StringPos+0x32>
		case 1:
		LCD_Cmd(0x80 | (pos & 0x0F));
 4b6:	84 2f       	mov	r24, r20
 4b8:	8f 70       	andi	r24, 0x0F	; 15
 4ba:	80 68       	ori	r24, 0x80	; 128
 4bc:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
		LCD_String(string);
 4c0:	ce 01       	movw	r24, r28
 4c2:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
		break;
 4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <LCD_StringPos+0x32>
		case 2:
		LCD_Cmd(0xC0 | (pos & 0x0F));
 4c8:	84 2f       	mov	r24, r20
 4ca:	8f 70       	andi	r24, 0x0F	; 15
 4cc:	80 6c       	ori	r24, 0xC0	; 192
 4ce:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
		LCD_String(string);
 4d2:	ce 01       	movw	r24, r28
 4d4:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
		break;
	}
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <Temp_Send>:
		}
    }
}

void Temp_Send(){
	unsigned short temp = Temp_Read(1);
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 51 00 	call	0xa2	; 0xa2 <Temp_Read>
	temp /= 4;
	SPITxRx(temp) == 10;
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	0e 94 8f 03 	call	0x71e	; 0x71e <SPITxRx>
 4f0:	08 95       	ret

000004f2 <main>:
void Temp_Send();

int main(void)
{
	unsigned char Cmd = 0;
    DIO_Init();
 4f2:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_Init>
	LCD_Init();
 4f6:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_Init>
	SPI_Init(Slave);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <SPI_Init>
	ADC_Init();
 500:	0e 94 4a 00 	call	0x94	; 0x94 <ADC_Init>
	DC_Init();
 504:	0e 94 5f 00 	call	0xbe	; 0xbe <DC_Init>
    while (1) 
    {
		Temp_Send();
 508:	0e 94 6f 02 	call	0x4de	; 0x4de <Temp_Send>
		Cmd = SPITxRx(11);
 50c:	8b e0       	ldi	r24, 0x0B	; 11
 50e:	0e 94 8f 03 	call	0x71e	; 0x71e <SPITxRx>
		switch(Cmd){
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	31 97       	sbiw	r30, 0x01	; 1
 518:	e9 30       	cpi	r30, 0x09	; 9
 51a:	f1 05       	cpc	r31, r1
 51c:	a8 f7       	brcc	.-22     	; 0x508 <main+0x16>
 51e:	e6 5d       	subi	r30, 0xD6	; 214
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	0c 94 94 03 	jmp	0x728	; 0x728 <__tablejump2__>
			case 1:
			LCD_String("Living Room");
 526:	80 ea       	ldi	r24, 0xA0	; 160
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			LCD_StringPos("Lights ON",2,0);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	62 e0       	ldi	r22, 0x02	; 2
 532:	8c ea       	ldi	r24, 0xAC	; 172
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_StringPos>
			DIO_Write(DIO_ChannelC1,STD_High);
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	81 e1       	ldi	r24, 0x11	; 17
 53e:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
 542:	2f ef       	ldi	r18, 0xFF	; 255
 544:	83 ed       	ldi	r24, 0xD3	; 211
 546:	90 e3       	ldi	r25, 0x30	; 48
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	80 40       	sbci	r24, 0x00	; 0
 54c:	90 40       	sbci	r25, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <main+0x56>
 550:	00 c0       	rjmp	.+0      	; 0x552 <main+0x60>
 552:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 55a:	d6 cf       	rjmp	.-84     	; 0x508 <main+0x16>
			case 2:
			LCD_String("Living Room");
 55c:	80 ea       	ldi	r24, 0xA0	; 160
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			LCD_StringPos("Lights OFF",2,4);
 564:	44 e0       	ldi	r20, 0x04	; 4
 566:	62 e0       	ldi	r22, 0x02	; 2
 568:	86 eb       	ldi	r24, 0xB6	; 182
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_StringPos>
			DIO_Write(DIO_ChannelC1,STD_Low);
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	81 e1       	ldi	r24, 0x11	; 17
 574:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
 578:	2f ef       	ldi	r18, 0xFF	; 255
 57a:	83 ed       	ldi	r24, 0xD3	; 211
 57c:	90 e3       	ldi	r25, 0x30	; 48
 57e:	21 50       	subi	r18, 0x01	; 1
 580:	80 40       	sbci	r24, 0x00	; 0
 582:	90 40       	sbci	r25, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <main+0x8c>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x96>
 588:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 590:	bb cf       	rjmp	.-138    	; 0x508 <main+0x16>
			case 3:
			LCD_String("Bedroom Lights");
 592:	81 ec       	ldi	r24, 0xC1	; 193
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			LCD_StringPos("ON",2,7);
 59a:	47 e0       	ldi	r20, 0x07	; 7
 59c:	62 e0       	ldi	r22, 0x02	; 2
 59e:	85 ee       	ldi	r24, 0xE5	; 229
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_StringPos>
			DIO_Write(DIO_ChannelC2,STD_High);
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	82 e1       	ldi	r24, 0x12	; 18
 5aa:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	83 ed       	ldi	r24, 0xD3	; 211
 5b2:	90 e3       	ldi	r25, 0x30	; 48
 5b4:	21 50       	subi	r18, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0xc2>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <main+0xcc>
 5be:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 5c6:	a0 cf       	rjmp	.-192    	; 0x508 <main+0x16>
			case 4:
			LCD_String("Bedroom Lights");
 5c8:	81 ec       	ldi	r24, 0xC1	; 193
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			LCD_StringPos("OFF",2,7);
 5d0:	47 e0       	ldi	r20, 0x07	; 7
 5d2:	62 e0       	ldi	r22, 0x02	; 2
 5d4:	8d ef       	ldi	r24, 0xFD	; 253
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_StringPos>
			DIO_Write(DIO_ChannelC2,STD_Low);
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	82 e1       	ldi	r24, 0x12	; 18
 5e0:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	83 ed       	ldi	r24, 0xD3	; 211
 5e8:	90 e3       	ldi	r25, 0x30	; 48
 5ea:	21 50       	subi	r18, 0x01	; 1
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0xf8>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <main+0x102>
 5f4:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 5fc:	85 cf       	rjmp	.-246    	; 0x508 <main+0x16>
			case 5:
			LCD_String("Kitchen Lights");
 5fe:	80 ed       	ldi	r24, 0xD0	; 208
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			LCD_StringPos("ON",2,7);
 606:	47 e0       	ldi	r20, 0x07	; 7
 608:	62 e0       	ldi	r22, 0x02	; 2
 60a:	85 ee       	ldi	r24, 0xE5	; 229
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_StringPos>
			DIO_Write(DIO_ChannelC3,STD_High);
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	83 e1       	ldi	r24, 0x13	; 19
 616:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
 61a:	2f ef       	ldi	r18, 0xFF	; 255
 61c:	83 ed       	ldi	r24, 0xD3	; 211
 61e:	90 e3       	ldi	r25, 0x30	; 48
 620:	21 50       	subi	r18, 0x01	; 1
 622:	80 40       	sbci	r24, 0x00	; 0
 624:	90 40       	sbci	r25, 0x00	; 0
 626:	e1 f7       	brne	.-8      	; 0x620 <main+0x12e>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x138>
 62a:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 632:	6a cf       	rjmp	.-300    	; 0x508 <main+0x16>
			case 6:
			LCD_String("Kitchen Lights");
 634:	80 ed       	ldi	r24, 0xD0	; 208
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			LCD_StringPos("OFF",2,7);
 63c:	47 e0       	ldi	r20, 0x07	; 7
 63e:	62 e0       	ldi	r22, 0x02	; 2
 640:	8d ef       	ldi	r24, 0xFD	; 253
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_StringPos>
			DIO_Write(DIO_ChannelC3,STD_Low);
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	83 e1       	ldi	r24, 0x13	; 19
 64c:	0e 94 88 00 	call	0x110	; 0x110 <DIO_Write>
 650:	2f ef       	ldi	r18, 0xFF	; 255
 652:	83 ed       	ldi	r24, 0xD3	; 211
 654:	90 e3       	ldi	r25, 0x30	; 48
 656:	21 50       	subi	r18, 0x01	; 1
 658:	80 40       	sbci	r24, 0x00	; 0
 65a:	90 40       	sbci	r25, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <main+0x164>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <main+0x16e>
 660:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 668:	4f cf       	rjmp	.-354    	; 0x508 <main+0x16>
			case 7:
			LCD_String("Motor ON");
 66a:	8f ed       	ldi	r24, 0xDF	; 223
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			LCD_StringPos("Clockwise",2,0);
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	62 e0       	ldi	r22, 0x02	; 2
 676:	8d ee       	ldi	r24, 0xED	; 237
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_StringPos>
			DC_On(1);
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	0e 94 68 00 	call	0xd0	; 0xd0 <DC_On>
 684:	2f ef       	ldi	r18, 0xFF	; 255
 686:	83 ed       	ldi	r24, 0xD3	; 211
 688:	90 e3       	ldi	r25, 0x30	; 48
 68a:	21 50       	subi	r18, 0x01	; 1
 68c:	80 40       	sbci	r24, 0x00	; 0
 68e:	90 40       	sbci	r25, 0x00	; 0
 690:	e1 f7       	brne	.-8      	; 0x68a <main+0x198>
 692:	00 c0       	rjmp	.+0      	; 0x694 <main+0x1a2>
 694:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 69c:	35 cf       	rjmp	.-406    	; 0x508 <main+0x16>
			case 8:
			LCD_String("Motor ON");
 69e:	8f ed       	ldi	r24, 0xDF	; 223
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			LCD_StringPos("Anti-Clockwise",2,0);
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	62 e0       	ldi	r22, 0x02	; 2
 6aa:	88 ee       	ldi	r24, 0xE8	; 232
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_StringPos>
			DC_On(2);
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	0e 94 68 00 	call	0xd0	; 0xd0 <DC_On>
 6b8:	2f ef       	ldi	r18, 0xFF	; 255
 6ba:	83 ed       	ldi	r24, 0xD3	; 211
 6bc:	90 e3       	ldi	r25, 0x30	; 48
 6be:	21 50       	subi	r18, 0x01	; 1
 6c0:	80 40       	sbci	r24, 0x00	; 0
 6c2:	90 40       	sbci	r25, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <main+0x1cc>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0x1d6>
 6c8:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 6d0:	1b cf       	rjmp	.-458    	; 0x508 <main+0x16>
			case 9:
			LCD_String("Motor OFF");
 6d2:	87 ef       	ldi	r24, 0xF7	; 247
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_String>
			DC_Off();
 6da:	0e 94 7f 00 	call	0xfe	; 0xfe <DC_Off>
 6de:	2f ef       	ldi	r18, 0xFF	; 255
 6e0:	83 ed       	ldi	r24, 0xD3	; 211
 6e2:	90 e3       	ldi	r25, 0x30	; 48
 6e4:	21 50       	subi	r18, 0x01	; 1
 6e6:	80 40       	sbci	r24, 0x00	; 0
 6e8:	90 40       	sbci	r25, 0x00	; 0
 6ea:	e1 f7       	brne	.-8      	; 0x6e4 <main+0x1f2>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <main+0x1fc>
 6ee:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_Cmd>
			break;
 6f6:	08 cf       	rjmp	.-496    	; 0x508 <main+0x16>

000006f8 <SPI_Init>:
 */ 
#include "SPI.h"
#include <avr/io.h>

void SPI_Init(SPIState state){
	switch(state){
 6f8:	88 23       	and	r24, r24
 6fa:	19 f0       	breq	.+6      	; 0x702 <SPI_Init+0xa>
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	49 f0       	breq	.+18     	; 0x712 <SPI_Init+0x1a>
 700:	08 95       	ret
		case Master:
		SPIDDR |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 702:	87 b3       	in	r24, 0x17	; 23
 704:	80 6b       	ori	r24, 0xB0	; 176
 706:	87 bb       	out	0x17, r24	; 23
		SPIDDR &=~ (1<<MISO);
 708:	be 98       	cbi	0x17, 6	; 23
		SlaveDIS();
 70a:	c4 9a       	sbi	0x18, 4	; 24
		//SPCR |= (1<<MSTR)|(1<<SPE);
		SPI->MySPCR.S_MSTR = 1;
 70c:	6c 9a       	sbi	0x0d, 4	; 13
		SPI->MySPCR.S_SPE = 1;
 70e:	6e 9a       	sbi	0x0d, 6	; 13
		break;
 710:	08 95       	ret
		case Slave:
		SPIDDR &=~ ((1<<SS)|(1<<MOSI)|(1<<SCK));
 712:	87 b3       	in	r24, 0x17	; 23
 714:	8f 74       	andi	r24, 0x4F	; 79
 716:	87 bb       	out	0x17, r24	; 23
		SPIDDR |= (1<<MISO);
 718:	be 9a       	sbi	0x17, 6	; 23
		//SPCR |= (1<<SPE);
		SPI->MySPCR.S_SPE = 1;
 71a:	6e 9a       	sbi	0x0d, 6	; 13
 71c:	08 95       	ret

0000071e <SPITxRx>:
		break;
	}
}

unsigned char SPITxRx(unsigned char data){
	SPDR = data;
 71e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 720:	77 9b       	sbis	0x0e, 7	; 14
 722:	fe cf       	rjmp	.-4      	; 0x720 <SPITxRx+0x2>
	return SPDR;
 724:	8f b1       	in	r24, 0x0f	; 15
 726:	08 95       	ret

00000728 <__tablejump2__>:
 728:	ee 0f       	add	r30, r30
 72a:	ff 1f       	adc	r31, r31
 72c:	05 90       	lpm	r0, Z+
 72e:	f4 91       	lpm	r31, Z
 730:	e0 2d       	mov	r30, r0
 732:	09 94       	ijmp

00000734 <_exit>:
 734:	f8 94       	cli

00000736 <__stop_program>:
 736:	ff cf       	rjmp	.-2      	; 0x736 <__stop_program>
